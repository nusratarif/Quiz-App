{"version":3,"sources":["Components/QuestionCard.styles.ts","Api.ts","Components/QuestionCard.tsx","utils.ts","Images/bg.jpg","App.style.ts","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","correctAnswer","answer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","TOTAL_QUESTIONS","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","EASY","startTrivia","newQuestions","length","undefined","e","currentTarget","prev","answerObject","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82e2dabd.chunk.js","sourcesContent":["\nimport styled from 'styled-components';\n\nexport const Wrapper = styled.div`\nmax-width: 1100px;\nbackground: #ebfeff;\nborder-radius: 10px;\nborder: 2px solid #0085a3;\npadding: 20px;\nbox-shadow: 0px, 5px, 10px rgba(0, 0, 0, 0.25);\ntext-align: center;\n\np {\n    font-size: 1.5rem;\n}\n`\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n\n   transition: all 0.3s ease;\n\n   :hover {\n       opacity: 0.8;\n   }\n\n   button {\n       cursor: pointer;\n       user-select: none;\n       font-size: 1.2rem;\n       width: 100%;\n       height: 50px;\n       margin: 5px 0;\n       background: ${({ correct, userClicked }) => \n         correct\n         ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n         : !correct && userClicked\n         ?  'linear-gradient(90deg, #ff5656, #c16868)'\n         :  'linear-gradient(90deg, #56ccff, #6eafb4)'  \n    };\n    border: 3px solid #fff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25)\n   }\n`;","import { shuffleArray } from './utils'\n\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n}\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`; \n    const data = await (await fetch(endpoint)).json();\n    return data.results.map((question: Question) => (\n      {\n        ...question,\n        answers: shuffleArray([\n          ...question.incorrect_answers,\n           question.correct_answer\n          ])\n      }\n    )) ;\n};","import React from 'react';\n//Types\nimport { AnswerObject } from '../App';\n//Styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles'\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNr: number;\n    totalQuestions: number;\n\n};\n\nconst QuestionCard: React.FC<Props> = ({\n    question,\n    answers, \n    callback, \n    userAnswer, \n    questionNr, \n    totalQuestions,\n}) => (\n   <Wrapper>\n       <p className=\"number\">\n         Question: {questionNr} / {totalQuestions}\n       </p>\n       <p dangerouslySetInnerHTML={{ __html: question }} />\n   \n   <div>\n   {answers.map((answers) => (\n       \n       <ButtonWrapper\n        key={answers}\n        correct={userAnswer?.correctAnswer === answers}\n        userClicked={userAnswer?.answer === answers}\n        >\n        <button disabled={userAnswer ? true : false} value={answers} onClick={callback}>\n            <span dangerouslySetInnerHTML={{ __html: answers}} />\n        </button>\n       </ButtonWrapper>\n  \n   ))}\n    </div>\n   </Wrapper>\n);   \n\n\n\nexport default QuestionCard;","export const shuffleArray = (array: any[]) =>\n[...array].sort(() => Math.random() - 0.5);","export default __webpack_public_path__ + \"static/media/bg.616e45fe.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\n//@ts-ignore\nimport BGImage from './Images/bg.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\nhtml {\n    height: 100%;\n}\nbody {\n    background-image: url(${BGImage}); \n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n}\n* {\n    box-sizing: border-box;\n    font-family: 'catamaran', sans-serif;\n}\n`;\n\nexport const Wrapper = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n\n> p {\n    color: #fff;\n}\n.score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n}\nh1 {\n    font-family: Fascinate Inline, Haettenschweiler, 'Arial Narrow Bold', sans-serif;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    font-weight: 400;\n    text-align: center;\n    margin: 20px;\n}\n.start, .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #fff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px, 5px, 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px;\n    padding: 0 40px;\n    font-size: 18px;\n}\n.start {\n    max-width: 200px;\n}\n`;","import React, {useState} from 'react';\nimport QuestionCard from './Components/QuestionCard';\nimport { fetchQuizQuestions } from './Api';\nimport { QuestionState, Difficulty } from './Api';\nimport { GlobalStyle, Wrapper} from './App.style';\n\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n   const [loading, setLoading] = useState(false);\n   const [questions, setQuestions] = useState<QuestionState[]>([]);\n   const [number, setNumber] = useState(0);\n   const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n   const [score, setScore] = useState(0);\n   const [gameOver, setGameOver] = useState(true);\n\n   console.log(fetchQuizQuestions(TOTAL_QUESTIONS,Difficulty.EASY));\n   const startTrivia = async () => {\n        setLoading(true);\n        setGameOver(false);\n  \n   const newQuestions = await fetchQuizQuestions(\n     TOTAL_QUESTIONS,\n     Difficulty.EASY\n   )\n\n   setQuestions(newQuestions);\n   setScore(0);\n   setUserAnswers([]);\n   setNumber(0);\n   setLoading(false);\n  };\n   const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if (!gameOver) {\n          //User answer\n          const answer = e.currentTarget.value;\n          //check answer against correct answer\n          const correct = questions[number].correct_answer === answer;\n          //Add Score if answer is correct\n          if (correct) setScore(prev => prev + 1);\n          //Save Answer in the Array for User Answers\n          const answerObject = {\n            question: questions[number].question,\n            answer,\n            correct,\n            correctAnswer: questions[number].correct_answer,\n          };\n          setUserAnswers((prev) => [...prev, answerObject]);\n        }\n   };\n\n   const nextQuestion = () => {\n      // Move on the next Question if not the last question\n      const nextQuestion = number + 1;\n      if (nextQuestion === TOTAL_QUESTIONS) {\n        setGameOver(true);\n      } else {\n        setNumber(nextQuestion);\n      }\n   }\n\n\n  return (\n    <>\n    <GlobalStyle />\n    <Wrapper>\n      <h1>REACT QUIZ</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n      <button className=\"start\" onClick={startTrivia}>\n        Start\n      </button>\n    ) : null}\n      {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n      {loading && <p>Loading Questions ...</p>}\n      {!loading && !gameOver &&(\n      <QuestionCard \n       questionNr={number + 1}\n       totalQuestions={TOTAL_QUESTIONS}\n       question={questions[number].question}\n       answers={questions[number].answers}\n       userAnswer={userAnswers ? userAnswers[number] : undefined}\n       callback={checkAnswer        }\n      />\n      )}\n      {!gameOver &&\n       !loading &&\n       userAnswers.length === number + 1 && \n       number !== TOTAL_QUESTIONS - 1 ? (\n      <button className=\"next\" onClick={nextQuestion}>\n        Next Question\n      </button>\n      ) : null}\n    </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}