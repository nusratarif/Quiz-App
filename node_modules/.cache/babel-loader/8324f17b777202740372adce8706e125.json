{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/nusrat-arif/Nusrat Jahan CNC/REACT/REACT ASSIGNMENT/Project-6/quiz-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport QuestionCard from './Components/QuestionCard';\nimport { fetchQuizQuestions } from './Api';\nimport { Difficulty } from './Api';\nimport { Globalstyle } from './App.style';\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  console.log(fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY));\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      //User answer\n      const answer = e.currentTarget.value; //check answer against correct answer\n\n      const correct = questions[number].correct_answer === answer; //Add Score if answer is correct\n\n      if (correct) setScore(prev => prev + 1); //Save Answer in the Array for User Answers\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on the next Question if not the last question\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Globalstyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"REACT QUIZ\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this), gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start\",\n        onClick: startTrivia,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this) : null, !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 20\n      }, this) : null, loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading Questions ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }, this), !loading && !gameOver && /*#__PURE__*/_jsxDEV(QuestionCard, {\n        questionNr: number + 1,\n        totalQuestions: TOTAL_QUESTIONS,\n        question: questions[number].question,\n        answers: questions[number].answers,\n        userAnswer: userAnswers ? userAnswers[number] : undefined,\n        callback: checkAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next\",\n        onClick: nextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"3vxO9CiM0ITniaGpI+eu+AjXM9U=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/nusrat-arif/Nusrat Jahan CNC/REACT/REACT ASSIGNMENT/Project-6/quiz-app/src/App.tsx"],"names":["React","useState","QuestionCard","fetchQuizQuestions","Difficulty","Globalstyle","TOTAL_QUESTIONS","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","EASY","startTrivia","newQuestions","checkAnswer","e","answer","currentTarget","value","correct","correct_answer","prev","answerObject","question","correctAnswer","nextQuestion","length","answers","undefined"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport QuestionCard from './Components/QuestionCard';\nimport { fetchQuizQuestions } from './Api';\nimport { QuestionState, Difficulty } from './Api';\nimport { Globalstyle, Wrapper} from './App.style';\n\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n   const [loading, setLoading] = useState(false);\n   const [questions, setQuestions] = useState<QuestionState[]>([]);\n   const [number, setNumber] = useState(0);\n   const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n   const [score, setScore] = useState(0);\n   const [gameOver, setGameOver] = useState(true);\n\n   console.log(fetchQuizQuestions(TOTAL_QUESTIONS,Difficulty.EASY));\n   const startTrivia = async () => {\n        setLoading(true);\n        setGameOver(false);\n  \n   const newQuestions = await fetchQuizQuestions(\n     TOTAL_QUESTIONS,\n     Difficulty.EASY\n   )\n\n   setQuestions(newQuestions);\n   setScore(0);\n   setUserAnswers([]);\n   setNumber(0);\n   setLoading(false);\n  };\n   const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if (!gameOver) {\n          //User answer\n          const answer = e.currentTarget.value;\n          //check answer against correct answer\n          const correct = questions[number].correct_answer === answer;\n          //Add Score if answer is correct\n          if (correct) setScore(prev => prev + 1);\n          //Save Answer in the Array for User Answers\n          const answerObject = {\n            question: questions[number].question,\n            answer,\n            correct,\n            correctAnswer: questions[number].correct_answer,\n          };\n          setUserAnswers((prev) => [...prev, answerObject]);\n        }\n   };\n\n   const nextQuestion = () => {\n      // Move on the next Question if not the last question\n      const nextQuestion = number + 1;\n      if (nextQuestion === TOTAL_QUESTIONS) {\n        setGameOver(true);\n      } else {\n        setNumber(nextQuestion);\n      }\n   }\n\n\n  return (\n    <>\n    <Globalstyle />\n    <div className=\"App\">\n      <h1>REACT QUIZ</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n      <button className=\"start\" onClick={startTrivia}>\n        Start\n      </button>\n    ) : null}\n      {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n      {loading && <p>Loading Questions ...</p>}\n      {!loading && !gameOver &&(\n      <QuestionCard \n       questionNr={number + 1}\n       totalQuestions={TOTAL_QUESTIONS}\n       question={questions[number].question}\n       answers={questions[number].answers}\n       userAnswer={userAnswers ? userAnswers[number] : undefined}\n       callback={checkAnswer        }\n      />\n      )}\n      {!gameOver &&\n       !loading &&\n       userAnswers.length === number + 1 && \n       number !== TOTAL_QUESTIONS - 1 ? (\n      <button className=\"next\" onClick={nextQuestion}>\n        Next Question\n      </button>\n      ) : null}\n    </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}